{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\ncreateSlice({\n  name: \"counter\",\n  initialState: initialState\n});\n// create the reducer function\n// give it a defualt state counter = 0 as in the beginning no state is defined\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  if (action.type === \"increment\") {\n    return {\n      counter: state.counter + 1,\n      // passing show counter the same state, with no change\n      showCounter: state.showCounter\n    };\n  }\n\n  // the objects returned in these if conditions override the exisiting state\n  // if we dont mention showCounter as well the object will be overriden and replaced with null, as there is no value\n  // always return all values\n  if (action.type === \"increase\") {\n    // always use the return like this in redux\n    return {\n      counter: state.counter + action.amount,\n      // passing show counter the same state, with no change\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n  return state;\n};\n\n// create the store and pass reducer function to it\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["createStore","createSlice","initialState","counter","showCounter","name","counterReducer","state","arguments","length","undefined","action","type","amount","store"],"sources":["C:/Users/Omar Khan/Downloads/redux-counter/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = { counter: 0, showCounter: true };\r\n\r\ncreateSlice({\r\n  name: \"counter\",\r\n  initialState: initialState,\r\n});\r\n// create the reducer function\r\n// give it a defualt state counter = 0 as in the beginning no state is defined\r\nconst counterReducer = (state = initialState, action) => {\r\n  if (action.type === \"increment\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      // passing show counter the same state, with no change\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  // the objects returned in these if conditions override the exisiting state\r\n  // if we dont mention showCounter as well the object will be overriden and replaced with null, as there is no value\r\n  // always return all values\r\n  if (action.type === \"increase\") {\r\n    // always use the return like this in redux\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      // passing show counter the same state, with no change\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      showCounter: !state.showCounter,\r\n      counter: state.counter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\n// create the store and pass reducer function to it\r\nconst store = createStore(counterReducer);\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAEtDH,WAAW,CAAC;EACVI,IAAI,EAAE,SAAS;EACfH,YAAY,EAAEA;AAChB,CAAC,CAAC;AACF;AACA;AACA,MAAMI,cAAc,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGN,YAAY;EAAA,IAAES,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAClD,IAAIC,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MACLT,OAAO,EAAEI,KAAK,CAACJ,OAAO,GAAG,CAAC;MAC1B;MACAC,WAAW,EAAEG,KAAK,CAACH;IACrB,CAAC;EACH;;EAEA;EACA;EACA;EACA,IAAIO,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;IAC9B;IACA,OAAO;MACLT,OAAO,EAAEI,KAAK,CAACJ,OAAO,GAAGQ,MAAM,CAACE,MAAM;MACtC;MACAT,WAAW,EAAEG,KAAK,CAACH;IACrB,CAAC;EACH;EAEA,IAAIO,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MACLT,OAAO,EAAEI,KAAK,CAACJ,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEG,KAAK,CAACH;IACrB,CAAC;EACH;EAEA,IAAIO,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO;MACLR,WAAW,EAAE,CAACG,KAAK,CAACH,WAAW;MAC/BD,OAAO,EAAEI,KAAK,CAACJ;IACjB,CAAC;EACH;EAEA,OAAOI,KAAK;AACd,CAAC;;AAED;AACA,MAAMO,KAAK,GAAGd,WAAW,CAACM,cAAc,CAAC;AAEzC,eAAeQ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}